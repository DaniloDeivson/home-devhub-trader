# Padr√µes de C√°lculo Local - Trading & Backtest

## üéØ Vis√£o Geral

Este projeto implementa c√°lculos locais para m√©tricas de trading, evitando depend√™ncia de APIs externas e garantindo precis√£o nos resultados. Os c√°lculos s√£o baseados em dados consolidados de trades.

## üìä Componentes Principais

### MetricsDashboard.tsx
**Localiza√ß√£o**: [project/src/components/MetricsDashboard.tsx](mdc:project/src/components/MetricsDashboard.tsx)

**Responsabilidade**: M√©tricas gerais de performance baseadas no total consolidado de trades.

#### Fun√ß√µes de C√°lculo Local:
- `calcularEstatisticasTrades()`: Estat√≠sticas b√°sicas de trades
- `calcularMetricasAvancadas()`: M√©tricas avan√ßadas de performance
- `calcularPerdaMaximaDiaria()`: Perda m√°xima por dia

#### M√©tricas Calculadas:
- **Estat√≠sticas de Trades**: Total, Lucrativos, Perdedores, Zerados, Ganho/Perda M√©dio, Sequ√™ncias Consecutivas
- **M√©tricas Avan√ßadas**: Trade M√©dio, Maior Ganho/Perda, Ganho/Perda Bruto, Percentuais

### Metrics.tsx (DailyMetricsCards)
**Localiza√ß√£o**: [project/src/components/Metrics.tsx](mdc:project/src/components/Metrics.tsx)

**Responsabilidade**: M√©tricas baseadas em agrega√ß√µes temporais (di√°rias/mensais).

#### Fun√ß√µes de C√°lculo Local:
- `calcularSharpeRatio()`: Sharpe Ratio baseado em retornos di√°rios
- `calcularFatorRecuperacao()`: Recovery Factor baseado em dados mensais
- `calcularGanhosPerdasDiarios()`: M√©tricas de ganhos/perdas por dia
- `calcularEstatisticasOperacao()`: Estat√≠sticas operacionais di√°rias

## üîß Padr√µes de Implementa√ß√£o

### 1. Consolida√ß√£o de Dados
```typescript
// Para m√∫ltiplos CSVs
const trade = (() => {
  if (fileResults && Object.keys(fileResults).length > 0) {
    const allTrades: unknown[] = [];
    Object.keys(fileResults).forEach(fileName => {
      const strategyData = fileResults[fileName] as { trades?: unknown[] };
      if (strategyData && strategyData.trades && Array.isArray(strategyData.trades)) {
        allTrades.push(...strategyData.trades);
      }
    });
    return allTrades;
  } else {
    return tradeObject?.trades || [];
  }
})();
```

### 2. Filtros de Trades
```typescript
const tradesLucrativos = trade.filter(
  (trade: unknown) => ((trade as { pnl?: number }).pnl || 0) > 0
);

const tradesLoss = trade.filter(
  (trade: unknown) => ((trade as { pnl?: number }).pnl || 0) < 0
);
```

### 3. C√°lculo de Sequ√™ncias Consecutivas
```typescript
let maxPerdasConsecutivas = 0;
let maxGanhosConsecutivos = 0;
let perdasConsecutivasAtual = 0;
let ganhosConsecutivosAtual = 0;

trade.forEach((t: unknown) => {
  const pnl = (t as { pnl?: number }).pnl || 0;
  
  if (pnl > 0) {
    ganhosConsecutivosAtual++;
    perdasConsecutivasAtual = 0;
    maxGanhosConsecutivos = Math.max(maxGanhosConsecutivos, ganhosConsecutivosAtual);
  } else if (pnl < 0) {
    perdasConsecutivasAtual++;
    ganhosConsecutivosAtual = 0;
    maxPerdasConsecutivas = Math.max(maxPerdasConsecutivas, perdasConsecutivasAtual);
  }
});
```

### 4. Agrega√ß√£o por Data
```typescript
const dailyResults = new Map<string, number>();

trade.forEach((t) => {
  const tradeData = t as Record<string, unknown>;
  const date = new Date(tradeData.entry_date as string).toISOString().split('T')[0];
  const pnl = tradeData.pnl as number || 0;
  
  const current = dailyResults.get(date) || 0;
  dailyResults.set(date, current + pnl);
});
```

## üìà M√©tricas Espec√≠ficas

### Sharpe Ratio Local
```typescript
const calcularSharpeRatio = () => {
  // Calcular retornos di√°rios
  const dailyReturns = Array.from(dailyResults.values());
  const meanReturn = dailyReturns.reduce((sum, ret) => sum + ret, 0) / dailyReturns.length;
  const variance = dailyReturns.reduce((sum, ret) => sum + Math.pow(ret - meanReturn, 2), 0) / dailyReturns.length;
  const stdDev = Math.sqrt(variance);
  
  return stdDev > 0 ? meanReturn / stdDev : 0;
};
```

### Recovery Factor Local
```typescript
const calcularFatorRecuperacao = () => {
  // Calcular drawdown m√°ximo e lucro l√≠quido
  const netProfit = monthlyResults.reduce((sum, ret) => sum + ret, 0);
  const maxDrawdown = Math.min(...monthlyResults);
  
  return maxDrawdown !== 0 ? netProfit / Math.abs(maxDrawdown) : 0;
};
```

## üé® Padr√µes de Exibi√ß√£o

### Formata√ß√£o de M√©tricas
```typescript
const formatMetric = (
  value: number | undefined,
  isPercentage = false,
  isCurrency = false
): string => {
  if (value === undefined || value === null || isNaN(Number(value)))
    return "N/A";

  const numValue = Number(value);

  if (isCurrency) {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(numValue);
  }

  return isPercentage ? `${numValue.toFixed(2)}%` : numValue.toFixed(2);
};
```

### Aplica√ß√£o de Valores Calculados
```typescript
// Em vez de usar valores da API
{animatedMetrics.profitFactor as number || 0}

// Usar valores calculados localmente
{estatisticasTrades.profitFactor}
```

## üîç Debug e Logging

### Logs de Verifica√ß√£o
```typescript
console.log('üìä M√©tricas calculadas do TOTAL de todos os CSVs:', {
  totalTrades,
  tradesLucrativos: tradesLucrativos.length,
  tradesLoss: tradesLoss.length,
  payoff,
  ganhoMedio,
  perdaMedia,
  winRate,
  netProfit,
  temMultiplosCSVs: fileResults && Object.keys(fileResults).length > 1,
  estatisticasTrades,
  metricasAvancadas
});
```

## ‚ö° Benef√≠cios da Implementa√ß√£o Local

1. **Precis√£o**: C√°lculos baseados em dados reais consolidados
2. **Performance**: Sem depend√™ncia de APIs externas
3. **Consist√™ncia**: Mesma l√≥gica para CSV √∫nico e m√∫ltiplos
4. **Transpar√™ncia**: C√≥digo vis√≠vel e audit√°vel
5. **Flexibilidade**: F√°cil modifica√ß√£o e extens√£o

## üö® Considera√ß√µes Importantes

- **TypeScript**: Sempre usar type assertions para `unknown` types
- **Valida√ß√£o**: Verificar arrays vazios antes de calcular
- **Consolida√ß√£o**: Garantir que dados de m√∫ltiplos CSVs sejam corretamente mesclados
- **Performance**: Evitar rec√°lculos desnecess√°rios em re-renders
- **Debug**: Manter logs para verifica√ß√£o de valores calculados

## üìã Checklist de Implementa√ß√£o

- [ ] Implementar consolida√ß√£o de dados para m√∫ltiplos CSVs
- [ ] Criar fun√ß√µes de c√°lculo local espec√≠ficas
- [ ] Aplicar valores calculados na interface
- [ ] Adicionar logs de debug
- [ ] Validar tipos TypeScript
- [ ] Testar com dados reais
- [ ] Remover depend√™ncias de APIs externas
