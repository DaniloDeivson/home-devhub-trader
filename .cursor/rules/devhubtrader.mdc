# DEVHUB TRADER - REGRAS E DIRETRIZES

## üéØ REGRAS GERAIS DE DESENVOLVIMENTO

### 1. Padr√µes de C√≥digo

#### Frontend (React/TypeScript)
- **TypeScript**: Usar tipagem forte em todos os componentes
- **Hooks**: Preferir hooks funcionais sobre classes
- **Estado**: Usar Zustand para estado global, useState para estado local
- **Componentes**: Componentes funcionais com nomes em PascalCase
- **Props**: Interface TypeScript para todas as props
- **Imports**: Imports organizados (React, bibliotecas externas, internos)

#### Backend (Python/Flask)
- **PEP 8**: Seguir padr√µes de estilo Python
- **Type Hints**: Usar type hints em todas as fun√ß√µes
- **Docstrings**: Documentar todas as fun√ß√µes p√∫blicas
- **Error Handling**: Try/catch com mensagens espec√≠ficas
- **Logging**: Usar logging apropriado para debug

### 2. Estrutura de Arquivos

#### Organiza√ß√£o de Componentes
```
src/components/
‚îú‚îÄ‚îÄ [Feature]/           # Agrupar por funcionalidade
‚îÇ   ‚îú‚îÄ‚îÄ ComponentName.tsx
‚îÇ   ‚îú‚îÄ‚îÄ ComponentName.test.tsx
‚îÇ   ‚îî‚îÄ‚îÄ index.ts
‚îú‚îÄ‚îÄ common/              # Componentes reutiliz√°veis
‚îî‚îÄ‚îÄ layouts/             # Layouts da aplica√ß√£o
```

#### Organiza√ß√£o de P√°ginas
```
src/pages/
‚îú‚îÄ‚îÄ [Feature]Page.tsx    # P√°ginas principais
‚îú‚îÄ‚îÄ [Feature]Modal.tsx   # Modais espec√≠ficos
‚îî‚îÄ‚îÄ [Feature]Section.tsx # Se√ß√µes de p√°ginas
```

### 3. Conven√ß√µes de Nomenclatura

#### Frontend
- **Componentes**: PascalCase (ex: `MetricsDashboard`)
- **Fun√ß√µes**: camelCase (ex: `handleFileUpload`)
- **Constantes**: UPPER_SNAKE_CASE (ex: `API_ENDPOINTS`)
- **Interfaces**: PascalCase com prefixo I (ex: `ITradeData`)
- **Arquivos**: kebab-case (ex: `backtest-analysis.tsx`)

#### Backend
- **Fun√ß√µes**: snake_case (ex: `calcular_metrics`)
- **Classes**: PascalCase (ex: `BacktestEngine`)
- **Constantes**: UPPER_SNAKE_CASE (ex: `DEFAULT_CAPITAL`)
- **Arquivos**: snake_case (ex: `fun_calculos.py`)

## üìä REGRAS ESPEC√çFICAS PARA C√ÅLCULOS

### 1. C√°lculos de Trading

#### M√©tricas B√°sicas
```python
# Sempre validar dados de entrada
def calcular_metrics(df: pd.DataFrame, cdi: float = 0.12) -> Dict:
    if df.empty:
        return {"error": "DataFrame vazio"}
    
    # C√°lculos com tratamento de erro
    try:
        pnl = df['Res. Opera√ß√£o']
        lucro = pnl.sum()
        # ... resto dos c√°lculos
    except Exception as e:
        return {"error": f"Erro no c√°lculo: {str(e)}"}
```

#### Valida√ß√£o de Dados
- **CSV**: Sempre verificar encoding (latin1 para dados brasileiros)
- **Datas**: Converter para datetime com timezone
- **N√∫meros**: Tratar v√≠rgulas como separador decimal
- **Valores nulos**: Usar `pd.to_numeric(..., errors='coerce')`

### 2. Processamento de CSV

#### Padr√£o de Carregamento
```python
def carregar_csv(file) -> pd.DataFrame:
    try:
        df = pd.read_csv(
            file, 
            skiprows=5, 
            sep=';', 
            encoding='latin1', 
            decimal=','
        )
        
        # Convers√µes obrigat√≥rias
        df['Abertura'] = pd.to_datetime(df['Abertura'], format="%d/%m/%Y %H:%M:%S")
        df['Fechamento'] = pd.to_datetime(df['Fechamento'], format="%d/%m/%Y %H:%M:%S")
        df['Res. Opera√ß√£o'] = pd.to_numeric(df['Res. Opera√ß√£o'], errors='coerce')
        
        return df
    except Exception as e:
        raise ValueError(f"Erro ao processar CSV: {e}")
```

### 3. C√°lculos Avan√ßados

#### An√°lise de Correla√ß√£o
- Sempre verificar se h√° dados suficientes (m√≠nimo 2 arquivos)
- Tratar casos onde n√£o h√° sobreposi√ß√£o de datas
- Retornar m√©tricas de correla√ß√£o padronizadas

#### M√∫ltiplos Arquivos
- Processar cada arquivo individualmente
- Consolidar dados com `pd.concat()`
- Manter rastreabilidade dos arquivos originais

## üé® REGRAS DE INTERFACE

### 1. Componentes React

#### Estrutura Padr√£o
```typescript
interface ComponentProps {
  data: TradeData[];
  onUpdate?: (data: TradeData) => void;
  isLoading?: boolean;
}

export const ComponentName: React.FC<ComponentProps> = ({
  data,
  onUpdate,
  isLoading = false
}) => {
  // Hooks no topo
  const [state, setState] = useState();
  
  // Handlers
  const handleAction = useCallback(() => {
    // L√≥gica
  }, []);
  
  // Render
  return (
    <div className="component-container">
      {/* JSX */}
    </div>
  );
};
```

### 2. Estados de Loading

#### Padr√£o de Loading
```typescript
// Sempre mostrar estado de loading
{isLoading ? (
  <div className="loading-spinner">
    <Spinner />
  </div>
) : (
  <ComponentContent />
)}
```

### 3. Tratamento de Erros

#### Error Boundaries
```typescript
// Sempre capturar erros de API
const handleApiCall = async () => {
  try {
    setLoading(true);
    const result = await apiCall();
    setData(result);
  } catch (error) {
    setError(ErrorLogService.formatErrorMessage(error));
  } finally {
    setLoading(false);
  }
};
```

## üîß REGRAS DE API

### 1. Endpoints Flask

#### Estrutura Padr√£o
```python
@app.route('/api/endpoint', methods=['POST'])
def api_endpoint():
    try:
        # Valida√ß√£o de entrada
        if 'file' not in request.files:
            return jsonify({"error": "Arquivo n√£o fornecido"}), 400
        
        # Processamento
        result = process_data(request.files['file'])
        
        # Resposta
        return jsonify(result), 200
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500
```

### 2. Serializa√ß√£o JSON

#### Tratamento de Tipos NumPy
```python
class NumpyJSONProvider(JSONProvider):
    def _convert_numpy_types(self, obj):
        if isinstance(obj, np.integer):
            return int(obj)
        elif isinstance(obj, np.floating):
            return float(obj)
        elif isinstance(obj, np.ndarray):
            return obj.tolist()
        # ... outros tipos
```

### 3. Valida√ß√£o de Dados

#### Padr√£o de Valida√ß√£o
```python
def validate_csv_data(df: pd.DataFrame) -> bool:
    required_columns = ['Abertura', 'Fechamento', 'Res. Opera√ß√£o']
    
    for col in required_columns:
        if col not in df.columns:
            return False
    
    if df.empty:
        return False
    
    return True
```

## üóÑÔ∏è REGRAS DE BANCO DE DADOS

### 1. Supabase

#### Queries
```typescript
// Sempre usar try/catch
const loadData = async () => {
  try {
    const { data, error } = await supabase
      .from('table')
      .select('*')
      .eq('user_id', userId);
    
    if (error) throw error;
    return data;
  } catch (error) {
    ErrorLogService.logError(error, 'loadData');
    throw error;
  }
};
```

### 2. Migrations

#### Padr√£o de Migration
```sql
-- Sempre incluir rollback
BEGIN;
  -- Altera√ß√µes
  ALTER TABLE table_name ADD COLUMN new_column TYPE;
COMMIT;

-- Rollback (se necess√°rio)
-- ALTER TABLE table_name DROP COLUMN new_column;
```

## üìä REGRAS DE M√âTRICAS

### 1. C√°lculos de Performance

#### M√©tricas Obrigat√≥rias
- **Net Profit**: Sempre calcular
- **Win Rate**: Percentual de trades vencedores
- **Profit Factor**: Lucro bruto / Preju√≠zo bruto
- **Max Drawdown**: Maior queda consecutiva
- **Sharpe Ratio**: Retorno ajustado ao risco

#### Valida√ß√µes
```python
def validate_metrics(metrics: Dict) -> bool:
    required_keys = ['net_profit', 'win_rate', 'profit_factor']
    
    for key in required_keys:
        if key not in metrics:
            return False
    
    return True
```

### 2. An√°lise Temporal

#### Padr√µes de Agrupamento
- **Dia da Semana**: Segunda a Domingo
- **M√™s**: Janeiro a Dezembro
- **Ano**: Ano completo
- **Per√≠odo**: Datas espec√≠ficas

## üß† REGRAS DE IA

### 1. Integra√ß√£o OpenAI

#### Padr√£o de Prompt
```python
def generate_analysis_prompt(data: Dict) -> str:
    return f"""
    Analise os dados de trading fornecidos:
    - Net Profit: {data.get('net_profit')}
    - Win Rate: {data.get('win_rate')}%
    - Profit Factor: {data.get('profit_factor')}
    
    Forne√ßa insights sobre:
    1. Pontos fortes da estrat√©gia
    2. √Åreas de melhoria
    3. Recomenda√ß√µes espec√≠ficas
    """
```

### 2. Tratamento de Respostas

#### Valida√ß√£o de IA
```python
def validate_ai_response(response: str) -> bool:
    if not response or len(response) < 50:
        return False
    
    # Verificar se cont√©m insights √∫teis
    useful_keywords = ['recomendo', 'melhorar', 'forte', 'fraco']
    return any(keyword in response.lower() for keyword in useful_keywords)
```

## üîí REGRAS DE SEGURAN√áA

### 1. Autentica√ß√£o

#### Verifica√ß√£o de Sess√£o
```typescript
// Sempre verificar autentica√ß√£o
const { session } = useAuthStore();

if (!session) {
  return <Navigate to="/login" />;
}
```

### 2. Valida√ß√£o de Entrada

#### Sanitiza√ß√£o de Dados
```python
def sanitize_input(data: str) -> str:
    # Remover caracteres perigosos
    return data.strip().replace('<', '').replace('>', '')
```

### 3. Controle de Acesso

#### Verifica√ß√£o de Permiss√µes
```typescript
// Verificar limites do plano
const { robotLimit } = useRobotStore();

if (robots.length >= robotLimit) {
  return <PlanRestrictedSection />;
}
```

## üìà REGRAS DE PERFORMANCE

### 1. Otimiza√ß√£o Frontend

#### Lazy Loading
```typescript
// Usar lazy loading para componentes pesados
const HeavyComponent = lazy(() => import('./HeavyComponent'));

// Suspense wrapper
<Suspense fallback={<Spinner />}>
  <HeavyComponent />
</Suspense>
```

### 2. Otimiza√ß√£o Backend

#### Cache de C√°lculos
```python
# Cache para c√°lculos pesados
from functools import lru_cache

@lru_cache(maxsize=128)
def calculate_complex_metrics(data_hash: str) -> Dict:
    # C√°lculos complexos
    pass
```

### 3. Limpeza de Mem√≥ria

#### Cleanup de Componentes
```typescript
useEffect(() => {
  // Setup
  return () => {
    // Cleanup
    clearInterval(interval);
  };
}, []);
```

## üêõ REGRAS DE DEBUG

### 1. Logging

#### Padr√£o de Log
```typescript
// Usar ErrorLogService
ErrorLogService.logError(error, 'componentName');
```

### 2. Console Debug

#### Debug Condicional
```typescript
if (process.env.NODE_ENV === 'development') {
  console.log('Debug info:', data);
}
```

## üìù REGRAS DE DOCUMENTA√á√ÉO

### 1. Coment√°rios

#### Padr√£o de Coment√°rios
```typescript
/**
 * Calcula m√©tricas de performance de trading
 * @param trades - Array de trades
 * @param capital - Capital inicial
 * @returns Objeto com m√©tricas calculadas
 */
function calculateMetrics(trades: Trade[], capital: number): Metrics {
  // Implementa√ß√£o
}
```

### 2. README

#### Estrutura de README
- Vis√£o geral do projeto
- Instala√ß√£o e setup
- Uso b√°sico
- Contribui√ß√£o
- Licen√ßa

## üöÄ REGRAS DE DEPLOY

### 1. Vari√°veis de Ambiente

#### Configura√ß√£o
```bash
# .env.local
VITE_SUPABASE_URL=your_url
VITE_SUPABASE_ANON_KEY=your_key
OPENAI_API_KEY=your_key
```

### 2. Build

#### Scripts de Build
```json
{
  "scripts": {
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint ."
  }
}
```

Estas regras garantem consist√™ncia, qualidade e manutenibilidade do c√≥digo em todo o projeto DevHub Trader. ---
description:
globs:
alwaysApply: false
---
